#!/usr/bin/env python3
"""
Master workflow script for processing books
Orchestrates extraction, chunking, and formatting
"""

import argparse
import subprocess
import sys
from pathlib import Path
import json

def run_command(cmd, verbose=False):
    """Run a command and return success status"""
    if verbose:
        print(f"Running: {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"Error running command: {' '.join(cmd)}")
        print(f"Error: {result.stderr}")
        return False
    
    if verbose and result.stdout:
        print(result.stdout)
    
    return True

def process_book(config):
    """Process a book according to configuration"""
    
    # Ensure output directory exists
    output_dir = Path(config.get('output_dir', 'output'))
    output_dir.mkdir(parents=True, exist_ok=True)
    
    verbose = config.get('verbose', False)
    
    # Step 1: Extract section
    print(f"\n1. Extracting section from EPUB...")
    extract_cmd = [
        sys.executable, 'extract_book_section.py',
        config['epub_file']
    ]
    
    if 'start_markers' in config:
        extract_cmd.extend(['-s'] + config['start_markers'])
    if 'end_markers' in config:
        extract_cmd.extend(['-e'] + config['end_markers'])
    
    section_file = output_dir / f"{config['section_name']}_full.txt"
    extract_cmd.extend(['-o', str(section_file)])
    
    if verbose:
        extract_cmd.append('-v')
    
    if not run_command(extract_cmd, verbose):
        return False
    
    # Step 2: Create chunks
    print(f"\n2. Creating chunks...")
    chunks_file = output_dir / f"{config['section_name']}_chunks.txt"
    chunk_cmd = [
        sys.executable, 'create_chunks.py',
        str(section_file),
        '-o', str(chunks_file),
        '-s', str(config.get('chunk_size', 2000))
    ]
    
    if verbose:
        chunk_cmd.append('-v')
    
    if not run_command(chunk_cmd, verbose):
        return False
    
    # Step 3: Create placeholder for summaries
    print(f"\n3. Creating summaries placeholder...")
    summaries_file = output_dir / f"{config['section_name']}_summaries.txt"
    
    # For now, create a placeholder file
    # In real use, summaries would be generated by an AI
    with open(summaries_file, 'w', encoding='utf-8') as f:
        f.write("=== SUMMARY 1: Words 1-2000 ===\n")
        f.write("Word count: 150\n")
        f.write("This is a placeholder summary. In actual use, an AI would read each chunk ")
        f.write("and generate a 140-160 word summary of its content.\n\n")
    
    print(f"Created placeholder summaries file: {summaries_file}")
    print("NOTE: You need to generate actual summaries for each chunk!")
    
    # Step 4: Format output (only if summaries exist)
    if summaries_file.exists():
        print(f"\n4. Formatting output...")
        format_cmd = [
            sys.executable, 'format_output.py',
            '-c', str(chunks_file),
            '-s', str(summaries_file),
            '-t', config['book_title'],
            '-a', config['book_author'],
            '-o', str(output_dir / config['section_name']),
            '-f', 'all'
        ]
        
        if not run_command(format_cmd, verbose):
            return False
    
    print(f"\nâœ“ Processing complete!")
    print(f"Output files in: {output_dir}")
    
    return True

def main():
    parser = argparse.ArgumentParser(description='Process book sections end-to-end')
    parser.add_argument('config', help='Configuration file (JSON)')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Verbose output')
    
    args = parser.parse_args()
    
    # Load configuration
    config_path = Path(args.config)
    if not config_path.exists():
        print(f"Error: Configuration file '{args.config}' not found")
        
        # Create example config
        example_config = {
            "epub_file": "path/to/book.epub",
            "book_title": "Book Title",
            "book_author": "Author Name",
            "section_name": "book_one",
            "start_markers": ["BOOK ONE", "Chapter 1"],
            "end_markers": ["BOOK TWO"],
            "chunk_size": 2000,
            "output_dir": "output",
            "verbose": False
        }
        
        example_file = "example_config.json"
        with open(example_file, 'w') as f:
            json.dump(example_config, f, indent=2)
        
        print(f"\nCreated example configuration file: {example_file}")
        print("Edit this file and run again.")
        return
    
    with open(config_path, 'r') as f:
        config = json.load(f)
    
    if args.verbose:
        config['verbose'] = True
    
    # Process the book
    process_book(config)

if __name__ == "__main__":
    main()